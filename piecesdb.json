{"assets":[{"title":"React Input Component with State and Event Handler","id":"dd80cb56-20c5-4cb1-a527-0f18fd055d80","type":"CODE","raw":"import React from 'react'\n\nconst MyInput = () => {\n  const [value, setValue] = React.useState('')\n\n  // The event type is a \"ChangeEvent\"\n  // We pass in \"HTMLInputElement\" to the input\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setValue(e.target.value)\n  }\n\n  return <input value={value} onChange={onChange} id=\"input-example\"/>\n}","language":"ts","time":"4 days ago","created":"2023-10-11T12:40:20.647Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"bb0b8c08-d3a5-4991-af5f-e8cb7852efd7","created":{"value":"2023-10-11T12:40:20.647Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T12:40:20.647Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"dd80cb56-20c5-4cb1-a527-0f18fd055d80"},"type":"DESCRIPTION","text":"React with TypeScript: Best Practices\n\nIt can be tricky to work with React and TypeScript and find the right answers, so we've put together the best practices and examples to clear your doubts."},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"c6b0b484-c7cc-4e5f-bc8e-eda5bf9238f8","created":{"value":"2023-10-11T12:40:21.614Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T12:40:21.614Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"dd80cb56-20c5-4cb1-a527-0f18fd055d80"},"type":"DESCRIPTION","text":"This code defines a React component called MyInput that sets the value of an input element and passes it in \"HTMLInputElement\" to the input. It also uses `useState` to use state functions for changing","model":{"id":"b0602842-873f-40a8-9f2a-d124c4c652fb"}},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"4ecfce4e-a1c5-4d4d-9fe2-7b1171623522","created":{"value":"2023-10-11T12:40:33.057Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T12:40:33.057Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"dd80cb56-20c5-4cb1-a527-0f18fd055d80"},"type":"DESCRIPTION","text":"This code snippet creates a functional component called MyInput that renders an input element. It uses React's useState hook to manage the input's value and updates it when the user types. The value is stored in the state variable \"value\" and is updated","model":{"id":"b0602842-873f-40a8-9f2a-d124c4c652fb"}}],"updated":"2023-10-11T15:00:47.800Z"},{"title":"AppState Reducer with Two Actions","id":"e9113276-57fa-4daf-a956-3febcf151b53","type":"CODE","raw":"type AppState = {};\ntype Action =\n  | { type: \"SET_ONE\"; payload: string }\n  | { type: \"SET_TWO\"; payload: number };\n\nexport function reducer(state: AppState, action: Action): AppState {\n  switch (action.type) {\n    case \"SET_ONE\":\n      return {\n        ...state,\n        one: action.payload // `payload` is string\n      };\n    case \"SET_TWO\":\n      return {\n        ...state,\n        two: action.payload // `payload` is number\n      };\n    default:\n      return state;\n  }\n}","language":"ts","time":"4 days ago","created":"2023-10-11T12:39:12.403Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"b3d99b88-320d-4d18-928e-a8488bd4452b","created":{"value":"2023-10-11T12:39:12.403Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T12:39:12.403Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"e9113276-57fa-4daf-a956-3febcf151b53"},"type":"DESCRIPTION","text":"React with TypeScript: Best Practices\n\nIt can be tricky to work with React and TypeScript and find the right answers, so we've put together the best practices and examples to clear your doubts."},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"469bcde2-4032-4e21-91c1-7241e48af1f4","created":{"value":"2023-10-11T12:39:13.496Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T12:39:13.496Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"e9113276-57fa-4daf-a956-3febcf151b53"},"type":"DESCRIPTION","text":"This code defines a reducer function that takes in an AppState object and returns the payload of each action. It also includes methods to set one or two inputs, which can be used for rendering","model":{"id":"b0602842-873f-40a8-9f2a-d124c4c652fb"}},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"bd6cccc8-c7a2-4f50-ba1c-bfcef385fbc9","created":{"value":"2023-10-11T12:39:26.563Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T12:39:26.563Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"e9113276-57fa-4daf-a956-3febcf151b53"},"type":"DESCRIPTION","text":"This code snippet defines a reducer function that takes in an initial state and an action, and returns a new state based on the action type. The reducer handles two types of actions: \"SET_ONE\" and \"SET_TWO\", and updates the state accordingly","model":{"id":"b0602842-873f-40a8-9f2a-d124c4c652fb"}}],"updated":"2023-10-11T15:00:40.790Z"},{"title":"Typed User State with Null Initial Value","id":"6403bbd7-a27f-4e54-b089-43aa58cd5105","type":"CODE","raw":"type User = {\n  email: string;\n  id: string;\n}\n\n// the generic is the < >\n// the union is the User | null\n// together, TypeScript knows, \"Ah, user can be User or null\".\nconst [user, setUser] = useState<User | null>(null);","language":"ts","time":"4 days ago","created":"2023-10-11T12:38:38.909Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"0b1b072d-9475-4a7f-9eff-db8f4a1b02ea","created":{"value":"2023-10-11T12:38:38.909Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T12:38:38.909Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"6403bbd7-a27f-4e54-b089-43aa58cd5105"},"type":"DESCRIPTION","text":"React with TypeScript: Best Practices\n\nIt can be tricky to work with React and TypeScript and find the right answers, so we've put together the best practices and examples to clear your doubts."},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"12c3c776-e19a-41d7-8af8-d686065ac117","created":{"value":"2023-10-11T12:38:39.718Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T12:38:39.718Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"6403bbd7-a27f-4e54-b089-43aa58cd5105"},"type":"DESCRIPTION","text":"Defines a type called User that can be null, and assigns the user to an array of types.","model":{"id":"b0602842-873f-40a8-9f2a-d124c4c652fb"}},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"92951950-2ea4-4339-a9d1-ea2db6b91659","created":{"value":"2023-10-11T12:38:51.932Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T12:38:51.932Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"6403bbd7-a27f-4e54-b089-43aa58cd5105"},"type":"DESCRIPTION","text":"This code snippet defines a User type with email and id properties. It then declares a state variable called user using the useState hook, which can be either of type User or null.","model":{"id":"b0602842-873f-40a8-9f2a-d124c4c652fb"}}],"updated":"2023-10-11T15:00:40.785Z"},{"title":"Array to Object","id":"af0bdd40-a01f-4326-aabf-5e68cc5e2aa7","type":"CODE","raw":"const arrayToObj = <T extends { id: number }>(array: T[]): { [k: string]: T } => {\n  const out: { [k: string]: T } = {};\n  array.forEach((val) => {\n    out[val.id] = val;\n  });\n  return out;\n};","language":"ts","time":"4 days ago","created":"2023-10-11T04:30:51.569Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"68d10d13-2c79-4002-b03e-7ed2b0aa1d8b","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"af0bdd40-a01f-4326-aabf-5e68cc5e2aa7"},"type":"DESCRIPTION","text":"Turns an Array into an Object. From The Pieces TypeScript Collection."}],"updated":"2023-10-11T08:04:38.456Z"},{"title":"Async","id":"45f2c29b-ba5d-4622-92ae-38be2cbf543d","type":"CODE","raw":"const fetchData = async (): Promise<void> => {\n  // ... \n};","language":"ts","time":"4 days ago","created":"2023-10-11T04:30:51.569Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"68640178-688a-49e5-aa17-bbb74bf90a17","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"45f2c29b-ba5d-4622-92ae-38be2cbf543d"},"type":"DESCRIPTION","text":"Create a promise using typescript with a `void` return value. From The Pieces TypeScript Collection."}],"updated":"2023-10-11T08:04:45.463Z"},{"title":"Intersection","id":"c0cb48c2-2711-4b31-ba07-c609cb4430cf","type":"CODE","raw":"const intersection = (a: any[], b: any[]) => {\",\n  const s = new Set(b);\n\treturn [...new Set(a)].filter((x) => s.has(x));\n};","language":"ts","time":"4 days ago","created":"2023-10-11T04:30:51.569Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"77a4b9fa-e7a4-43a2-b2b3-715db51e4824","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"c0cb48c2-2711-4b31-ba07-c609cb4430cf"},"type":"DESCRIPTION","text":"Returns a list of elements that exist in both arrays. From The Pieces TypeScript Collection.\n\nðŸ’¡ Smart Description: This code relates to typescript, pieces typescript collection and Intersection"},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"c8831ad1-258f-4e61-b06b-38ea86bc5eaf","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"c0cb48c2-2711-4b31-ba07-c609cb4430cf"},"type":"DESCRIPTION","text":"This code relates to typescript, pieces typescript collection and Intersection"}],"updated":"2023-10-11T08:04:45.468Z"},{"title":"Is empty","id":"c8754864-e946-4bd1-850d-f323f280c330","type":"CODE","raw":"const isEmpty = (val: any) => val == null || !(Object.keys(val) || val.length;","language":"ts","time":"4 days ago","created":"2023-10-11T04:30:51.569Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"6f4742b9-542a-4ea0-a622-26ff1d0e16d9","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"c8754864-e946-4bd1-850d-f323f280c330"},"type":"DESCRIPTION","text":"This code relates to typescript, is empty and pieces typescript collection\n@returns {boolean}"},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"c031702f-8914-421b-be19-eb6e73b26716","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"c8754864-e946-4bd1-850d-f323f280c330"},"type":"DESCRIPTION","text":"Checks if a value is an empty object, array, or null. From The Pieces TypeScript Collection.\n\nðŸ’¡ Smart Description: This code relates to typescript, is empty and pieces typescript collection\n@returns {boolean}"}],"updated":"2023-10-11T08:04:45.465Z"},{"title":"Debounce","id":"320ba791-2109-4551-8d6e-a1e83b925aea","type":"CODE","raw":"const debounce = (fn: Function, ms = 300) => {\n\tlet timeoutId: ReturnType<typeof setTimeout>;\n  return function (this: any, ...args: any[]) {\n\t  clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => fn.apply(this, args), ms);\n  };\n};","language":"ts","time":"4 days ago","created":"2023-10-11T04:30:51.568Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"ca365064-5ad0-40d2-9311-cbffeddd97e5","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"320ba791-2109-4551-8d6e-a1e83b925aea"},"type":"DESCRIPTION","text":"Delays invoking a provided function at least since specified milliseconds have elapsed. From The Pieces TypeScript Collection.\n\nðŸ’¡ Smart Description: The debounce function is the same as `debounce` except that it can be used to\ndeal with typescript collection and typescript collections."},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"cd62669f-2d8c-4e8b-a6c2-05b13382db14","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"320ba791-2109-4551-8d6e-a1e83b925aea"},"type":"DESCRIPTION","text":"The debounce function is the same as `debounce` except that it can be used to\ndeal with typescript collection and typescript collections."}],"updated":"2023-10-11T08:04:38.451Z"},{"title":"Find key","id":"63262218-dbd9-42e8-8e4c-90ef47ec0b5c","type":"CODE","raw":"const findKey = (obj: any, fn: Function) => Object.keys(obj).find((key) => fn(obj[key], key, obj));","language":"ts","time":"4 days ago","created":"2023-10-11T04:30:51.568Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"42a4e551-5f6f-4d4a-ba71-9a62f4b894c6","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"63262218-dbd9-42e8-8e4c-90ef47ec0b5c"},"type":"DESCRIPTION","text":"This code relates to pieces typescript collection, find key and typescript fn"},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"9fd6b8ff-b65b-45c4-833f-e57f4b578db7","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"63262218-dbd9-42e8-8e4c-90ef47ec0b5c"},"type":"DESCRIPTION","text":"Returns the first key that meets a condition specified from passed function. From The Pieces TypeScript Collection.\n\nðŸ’¡ Smart Description: This code relates to pieces typescript collection, find key and typescript fn"}],"updated":"2023-10-11T08:04:31.429Z"},{"title":"Deep Clone","id":"6d40d80b-6344-472d-9ac3-b843e72b447f","type":"CODE","raw":"const deepClone = (obj: any) => {\n\tif (obj === null) return null;\n  let clone = { ...obj };\n\n  Object.keys(clone).forEach(\n\t  (key) =>\n      (clone[key] = typeof obj[key] === \"object\" ? deepClone(obj[key]) : obj[key])\n   );\n\t return Array.isArray(obj) && obj.length\n\t   ? (clone.length = obj.length) && Array.from(clone)\n\t   : Array.isArray(obj)\n     ? Array.from(obj)\n     : clone;\n};","language":"ts","time":"4 days ago","created":"2023-10-11T04:30:51.568Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"2a51e95a-c941-4feb-ac84-36115a4f2431","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"6d40d80b-6344-472d-9ac3-b843e72b447f"},"type":"DESCRIPTION","text":"Returns a deep clone of the given object.\n@param {any} obj - Object to be cloned, or null if none is provided"},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"325d46fb-f1fa-4633-989a-2311c3d1a975","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"6d40d80b-6344-472d-9ac3-b843e72b447f"},"type":"DESCRIPTION","text":"Creates a deep clone of an object. From The Pieces TypeScript Collection.\n\nðŸ’¡ Smart Description: Returns a deep clone of the given object.\n@param {any} obj - Object to be cloned, or null if none is provided"}],"updated":"2023-10-11T08:04:38.441Z"},{"title":"Function composition","id":"6cd78911-6c32-4248-82c2-9c3746246ffb","type":"CODE","raw":"const compose = (...fns: Func[]) => {\n\tfns.reduce((f, g) => (...args: any[]) => f(...castArray(g(...args))));\n}","language":"ts","time":"4 days ago","created":"2023-10-11T04:30:51.568Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"f6708dff-59b6-4c43-aa98-63ef3addd044","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"6cd78911-6c32-4248-82c2-9c3746246ffb"},"type":"DESCRIPTION","text":"Performs left to right function composition. From The Pieces TypeScript Collection."}],"updated":"2023-10-11T08:04:38.436Z"},{"title":"Delay async executions","id":"9fd08507-a117-45c7-85ac-7b21521e46fb","type":"CODE","raw":"const timeoutPromise: (duration: number) => Promise<void> = (duration: number): Promise<void> => new Promise(resolver => setTimeout(resolver, duration));","language":"ts","time":"4 days ago","created":"2023-10-11T04:30:51.568Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"2ee78c24-c645-4a67-a69e-72e820eb316e","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"9fd08507-a117-45c7-85ac-7b21521e46fb"},"type":"DESCRIPTION","text":"Turns setTimeout into a promise that can be used asynchronously. From The Pieces TypeScript Collection."}],"updated":"2023-10-11T08:04:38.447Z"},{"title":"Get Value","id":"4778ed03-b367-417e-9035-fc9a3fdc8015","type":"CODE","raw":"interface MyInterface {\n  id: number;\n  name: string;\n  properties: string[];\n}\n\nconst myObject: MyInterface = {\n  id: 1,\n  name: 'foo',\n  properties: ['a', 'b', 'c']\n};\n\nfunction getValue(value: keyof MyInterface) {\n  return myObject[value];\n}\n\ngetValue('id'); // 1\ngetValue('count')","language":"ts","time":"4 days ago","created":"2023-10-11T04:30:51.567Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"23017fc6-b0f4-476b-9326-e8d700a4cd58","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"4778ed03-b367-417e-9035-fc9a3fdc8015"},"type":"DESCRIPTION","text":"Get value of an object with an interface. From The Pieces TypeScript Collection."}],"updated":"2023-10-11T08:04:31.405Z"},{"title":"Check if at least one element passes function","id":"1b12d4a1-0d0d-40aa-8fb9-ec40babcba89","type":"CODE","raw":"const some = <T = any>(arr: T[], fn: (t: T) => boolean = Boolean) => arr.some(fn);","language":"ts","time":"4 days ago","created":"2023-10-11T04:30:51.567Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"07693ebf-92ba-4172-89a9-16fa09122d7c","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"1b12d4a1-0d0d-40aa-8fb9-ec40babcba89"},"type":"DESCRIPTION","text":"Tests whether at least one element in the array passes the test implemented by a provided function. From The Pieces TypeScript Collection.\n\nðŸ’¡ Smart Description: This code relates to typescript, some and pieces typescript collection"},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"e75f949c-06c2-4fdd-8c25-d0d1d4b58814","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"1b12d4a1-0d0d-40aa-8fb9-ec40babcba89"},"type":"DESCRIPTION","text":"This code relates to typescript, some and pieces typescript collection"}],"updated":"2023-10-11T08:04:24.395Z"},{"title":"Remove falsy values","id":"16cd6485-aeda-4be0-80ba-fda136a9f441","type":"CODE","raw":"const compact = (arr: any[]) => arr.filter(Boolean);","language":"ts","time":"4 days ago","created":"2023-10-11T04:30:51.567Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"220d1d10-ece5-4a18-8fef-ceabcd9e9ec4","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"16cd6485-aeda-4be0-80ba-fda136a9f441"},"type":"DESCRIPTION","text":"Removes falsy values from an array. From The Pieces TypeScript Collection.\n\nðŸ’¡ Smart Description: This code relates to compact, filter and pieces typescript collection.\n@param {Array} any Array of all elements in the array that should be sorted by their type (typescript/pieces)\n@returns {Function} Returns a function which returns true if each element is empty or false otherwise"},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"5424591a-ecac-49f2-b205-05eac427ba9f","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"16cd6485-aeda-4be0-80ba-fda136a9f441"},"type":"DESCRIPTION","text":"This code relates to compact, filter and pieces typescript collection.\n@param {Array} any Array of all elements in the array that should be sorted by their type (typescript/pieces)\n@returns {Function} Returns a function which returns true if each element is empty or false otherwise"}],"updated":"2023-10-11T08:04:31.417Z"},{"title":"Store record as a string with interface","id":"369fe4e6-7282-458a-99d1-55ce36078a33","type":"CODE","raw":"const myTypedObject: Record<string, MyInterface> = {\n  first: {...},\n  second: {...},\n  ...\n};","language":"ts","time":"4 days ago","created":"2023-10-11T04:30:51.567Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"54d47cce-419d-4373-b4d1-490be50a5588","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"369fe4e6-7282-458a-99d1-55ce36078a33"},"type":"DESCRIPTION","text":"Map a string key to a custom interface in an object. From The Pieces TypeScript Collection."}],"updated":"2023-10-11T08:04:31.423Z"},{"title":"Check if collection elements are true","id":"6787627e-e28f-4072-8db8-101f45f7ebea","type":"CODE","raw":"const all = <T = any>(arr: T[], fn: (t: T) => boolean = Boolean) => arr.every(fn);","language":"ts","time":"4 days ago","created":"2023-10-11T04:30:51.567Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"159f2f03-9dee-491b-92b3-ca05b26e4160","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"6787627e-e28f-4072-8db8-101f45f7ebea"},"type":"DESCRIPTION","text":"Returns true if all elements in a collection are true. From The Pieces TypeScript Collection."}],"updated":"2023-10-11T08:04:31.409Z"},{"title":"Omit properties from interface","id":"c7e81ac7-58ba-4c69-8df8-1f693684f8d7","type":"CODE","raw":"interface MyInterface {\n  id: number;\n  name: string;\n  properties: string[];\n}\n\ntype MyShortType = Omit<MyInterface, 'name' | 'id'>;","language":"ts","time":"4 days ago","created":"2023-10-11T04:30:51.566Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"8eb8f2dd-4d8a-4846-8dc2-39fbae5f9246","created":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.520Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"c7e81ac7-58ba-4c69-8df8-1f693684f8d7"},"type":"DESCRIPTION","text":"Exclude properties from a given interface. From The Pieces TypeScript Collection."}],"updated":"2023-10-11T08:04:24.389Z"},{"title":"Pick properties from interface","id":"1054a3cd-0ed5-4d63-9196-e501cc3c28bc","type":"CODE","raw":"interface MyInterface {\n  id: number;\n  name: string;\n  properties: string[];\n}\n\ntype MyShortType = Pick<MyInterface, 'name' | 'id'>;","language":"ts","time":"4 days ago","created":"2023-10-11T04:30:51.564Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"17607962-7725-4303-9ea4-48e2a5c1735a","created":{"value":"2023-10-11T04:30:51.519Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:30:51.519Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"1054a3cd-0ed5-4d63-9196-e501cc3c28bc"},"type":"DESCRIPTION","text":"Construct a new type based on partial properties of an interface. From The Pieces TypeScript Collection."}],"updated":"2023-10-11T08:04:24.382Z"},{"title":"Read a CSV file","id":"cbc6dea9-11a9-4b25-adb9-bf2d1cfeeb26","type":"CODE","raw":"const fileSystem = require(\"fs\");\nconst {\n\tparse\n} = require(\"csv-parse\");\n\nconst readCSV = filePath => {\n\tfileSystem.createReadStream(filePath)\n\t\t.pipe(parse({\n\t\t\tdelimiter: \",\",\n\t\t\tfrom_line: 2\n\t\t}))\n\t\t.on(\"data\", function(row) {\n\t\t\tconsole.log(row);\n\t\t})\n}","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.778Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"11da281a-b33e-4508-99f8-cff1b4bdba53","created":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"cbc6dea9-11a9-4b25-adb9-bf2d1cfeeb26"},"type":"DESCRIPTION","text":"Read a csv file from a file path using the fs module and a comma as a delimiter. From The Pieces Node.js Collection."}],"updated":"2023-10-11T08:04:24.376Z"},{"title":"Runtime environment check","id":"384e8e91-de31-4187-b184-6328f9979b6b","type":"CODE","raw":"const isBrowser = () => ![typeof window, typeof document].includes('undefined');","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.777Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"fc69f8ed-1f6c-45a6-80a7-a9cad9d6fae0","created":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"384e8e91-de31-4187-b184-6328f9979b6b"},"type":"DESCRIPTION","text":"Checks if the current runtime environment is a browser. From The Pieces Node.js Collection."}],"updated":"2023-10-11T08:04:24.369Z"},{"title":"Create a writable stream","id":"be9aebe5-613e-4a67-bb56-5bb7eb7a2e68","type":"CODE","raw":"const http = require('http');\nconst fileSystem = require('fs');\n\nhttp.createServer((request, response) => {\n\t// This opens up the writeable stream to `output`\n\tconst writeStream = fileSystem.createWriteStream('./output');\n\n\t// This pipes the POST data to the file\n\trequest.pipe(writeStream);\n\n\t// After all the data is saved, respond with a simple html form so they can post more data\n\trequest.on('end', function() {\n\t\tresponse.writeHead(200, {\n\t\t\t\"content-type\": \"text/html\"\n\t\t});\n\t\tresponse.end('<form method=\"POST\"><input name=\"test\" /><input type=\"submit\"></form>');\n\t});\n\n\t// This is here incase any errors occur\n\twriteStream.on('error', function(err) {\n\t\tconsole.log(err);\n\t});\n}).listen(8080);","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.777Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"82ba58d3-b924-4b13-8b66-f22b088a4ead","created":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"be9aebe5-613e-4a67-bb56-5bb7eb7a2e68"},"type":"DESCRIPTION","text":"Read chunks of data from an input stream and write to the destination using write(). The function returns a boolean value indicating if the operation was successful. From The Pieces Node.js Collection."}],"updated":"2023-10-11T08:04:17.364Z"},{"title":"Get home directory of the current user","id":"9c4061de-fb98-4288-be73-a7849ca31637","type":"CODE","raw":"const os = require('os');\nconst value =  os.homedir();\nconsole.log(\"os.homedir() => \" + value);","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.777Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"fced4f09-18bf-484b-aa8c-70b403af5dd8","created":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"9c4061de-fb98-4288-be73-a7849ca31637"},"type":"DESCRIPTION","text":"Used to get the home directory of the current user. From The Pieces Node.js Collection."}],"updated":"2023-10-11T08:04:17.361Z"},{"title":"Replace the existing content in a file","id":"861e882a-6d24-472f-8b6f-50ac317960ad","type":"CODE","raw":"const fileSystem = require('fs');\nconst editFile = (fileName, text) => {\n\tfileSystem.writeFile(fileName, text, (error) => {\n\t\tif (error) throw error;\n\t\tconsole.log('Replaced the file!');\n\t});\n}","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.777Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"2b7b10cc-3cb4-4ee1-9578-e161b970ea0a","created":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"861e882a-6d24-472f-8b6f-50ac317960ad"},"type":"DESCRIPTION","text":"Uses the writeFile method to replace a string in a file. From The Pieces Node.js Collection."}],"updated":"2023-10-11T08:04:17.356Z"},{"title":"Create a readable stream","id":"4d9b3cf9-d642-4db2-a3be-185fa47a5a9c","type":"CODE","raw":"const stream = require('stream');\nconst readableStream = new Stream.Readable();\nconst pushToStream = text => readableStream.push(text);","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.777Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"58aa5eb3-e5b3-4398-884e-618d17019572","created":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"4d9b3cf9-d642-4db2-a3be-185fa47a5a9c"},"type":"DESCRIPTION","text":"Initializes a readable stream that data can be sent to. From The Pieces Node.js Collection."}],"updated":"2023-10-11T08:04:17.349Z"},{"title":"Convert relative to absolute path","id":"4f27a7de-520b-4b85-a512-56dfa17af1da","type":"CODE","raw":"const path = require(\"path\"); \nconst resolvePath = relativePath => path.resolve(relativePath); ","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.776Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"9e84284c-532c-4203-8664-ce30289ec545","created":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"4f27a7de-520b-4b85-a512-56dfa17af1da"},"type":"DESCRIPTION","text":"Helps convert a relative path to an absolute path by replacing the start of the path with the home directory. From The Pieces Node.js Collection."}],"updated":"2023-10-11T08:04:10.326Z"},{"title":"Create an empty file","id":"eb4c661a-0103-439f-b4d6-9fa64c307774","type":"CODE","raw":"const fileSystem = require('fs');\n\nconst createFile = fileName => {\n\tfileSystem.open(fileName, 'w', error => {\n\t\tif (error) throw error;\n\t\tconsole.log('Saved!');\n\t});\n};","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.776Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"99d9cfe4-3caa-4ab1-8644-57ac6866fc4d","created":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"eb4c661a-0103-439f-b4d6-9fa64c307774"},"type":"DESCRIPTION","text":"Create an empty file using the open method From The Pieces Node.js Collection."}],"updated":"2023-10-11T08:04:17.343Z"},{"title":"Update an existing file","id":"fb2f9683-3afb-43c9-b2b5-ca56ad2bde20","type":"CODE","raw":"const fileSystem = require('fs');\n\nconst updateFile = (fileName, text) => {\n\tfileSystem.appendFile(fileName, text, (error) => {\n\t\tif (error) throw error;\n\t\tconsole.log('Updated the file!');\n\t});\n};","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.776Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"0726e560-b870-47d4-a778-da954eff0326","created":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"fb2f9683-3afb-43c9-b2b5-ca56ad2bde20"},"type":"DESCRIPTION","text":"Add to an existing fileâ€™s contents without overwriting the file and only updating at the end. From The Pieces Node.js Collection."}],"updated":"2023-10-11T08:04:10.333Z"},{"title":"Parse URLs","id":"0225e518-2d48-466c-9525-65474e94f70c","type":"CODE","raw":"const URL = require('url').URL;\n\nconst createParseableURL = url => new URL(url);","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.776Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"24426115-03ac-45b2-92c0-37cf5859af9d","created":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"0225e518-2d48-466c-9525-65474e94f70c"},"type":"DESCRIPTION","text":"Allow URLs to be parsed using the URL module which makes different parts of a URL available as object attributes From The Pieces Node.js Collection."}],"updated":"2023-10-11T08:04:10.319Z"},{"title":"Event emitter","id":"25b67421-2540-41fd-8dbe-74747f26bd84","type":"CODE","raw":"const myEmitter = new EventEmitter();\n\nfunction c1() {\n\tconsole.log('an event occurred!');\n}\n\nfunction c2() {\n\tconsole.log('yet another event occurred!');\n}\n\nmyEmitter.on('eventOne', c1); // Register for eventOne\nmyEmitter.on('eventOne', c2); // Register for eventOne","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.775Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"79940083-28ac-4710-a4fc-e727a9011666","created":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"25b67421-2540-41fd-8dbe-74747f26bd84"},"type":"DESCRIPTION","text":"/*\nThis function is used to create a new EventEmitter that will be called when the node.js, javascript and pieces are not yet an event occurred"},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"a3fc55ee-51f5-467f-b3fc-f052c23bf2f3","created":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"25b67421-2540-41fd-8dbe-74747f26bd84"},"type":"DESCRIPTION","text":"The event module includes an EventEmitter class that can be used to raise and handle custom events. From The Pieces Node.js Collection.\n\nðŸ’¡ Smart Description: /*\nThis function is used to create a new EventEmitter that will be called when the node.js, javascript and pieces are not yet an event occurred"}],"updated":"2023-10-11T08:04:10.306Z"},{"title":"Create a static file server","id":"36be152d-e3a0-4605-b005-03440b0d6a03","type":"CODE","raw":"const fileSystem = require('fs');\nconst http = require('http');\n\nhttp.createServer((request, response) => {\n\tfileSystem.readFile(__dirname + request.url, (error, data) => {\n\t\tif (error) {\n\t\t\tresponse.writeHead(404, {\n\t\t\t\t'Content-Type': 'text/html'\n\t\t\t});\n\t\t\tresponse.end('404: File not found');\n\t\t} else {\n\t\t\tresponse.writeHead(200, {\n\t\t\t\t'Content-Type': 'text/html'\n\t\t\t});\n\t\t\tresponse.end(data);\n\t\t}\n\t});\n}).listen(8000);","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.775Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"e72252f9-24dd-4cfe-9420-10e86571fce0","created":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"36be152d-e3a0-4605-b005-03440b0d6a03"},"type":"DESCRIPTION","text":"Given a requested URL, the static file server will listen for requests and try to find a file on the local filesystem. If no file is found or it doesnâ€™t exist, it returns a 404 error. The http module creates the server that listens on port 8000. From The Pieces Node.js Collection."}],"updated":"2023-10-11T08:04:10.312Z"},{"title":"Compare Two Buffers","id":"216dc4c1-8d6a-4ac8-ae64-25143e7743b1","type":"CODE","raw":"const buffer1 = Buffer.from('abc');\nconst buffer2 = Buffer.from('abc');\n\nlet x = Buffer.compare(buf1, buf2);\nconsole.log(x);","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.773Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"3cf030ed-0f6e-4c5e-be4e-f45583b3e844","created":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"216dc4c1-8d6a-4ac8-ae64-25143e7743b1"},"type":"DESCRIPTION","text":"Compares two buffer objects and returns a number defining their differences and can be used to sort arrays containing buffers. From The Pieces Node.js Collection."}],"updated":"2023-10-11T08:04:03.284Z"},{"title":"Store JSON in a File","id":"cab75bde-db31-40d9-a6d5-fcf613f69da1","type":"CODE","raw":"const fileSystem = require('fs')\n\nconst storeData = (data, path) => {\n  try {\n    fileSystem.writeFileSync(path, JSON.stringify(data))\n  } catch (error) {\n    console.error(error)\n  }\n}","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.773Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"6da69197-6fae-42a2-b5be-c7cb2afd1de1","created":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"cab75bde-db31-40d9-a6d5-fcf613f69da1"},"type":"DESCRIPTION","text":"/*\nThis function is used to store the data in a JSON file."},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"76c9f034-8034-4254-8c8d-c5a3631baed3","created":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"cab75bde-db31-40d9-a6d5-fcf613f69da1"},"type":"DESCRIPTION","text":"Given a data object, convert the object to a JSON string and store it in a file with the specified path. From The Pieces Node.js Collection.\n\nðŸ’¡ Smart Description: /*\nThis function is used to store the data in a JSON file."}],"updated":"2023-10-11T08:04:03.296Z"},{"title":"Get data out of an HTTP Get Request","id":"9b96e589-3a75-410f-b663-b303f3c5e7a0","type":"CODE","raw":"const callback = (response) => {\n\tlet str = \"\";\n\tresponse.on(\"data\", (chunk) => {\n\t\tstr += chunk;\n\t});\n\n\tresponse.on(\"end\", () => {\n\t\tconsole.log(str);\n\t\t// ...\n\t});\n};\n\nconst request = http.request(options, callback).end();","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.773Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"4648fe31-5d4c-4e57-a796-f73a47f0e240","created":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"9b96e589-3a75-410f-b663-b303f3c5e7a0"},"type":"DESCRIPTION","text":"To get the data out of a Node.js HTTP get request with JavaScript, we can listen for the data event on the response and append it until the response has ended. From The Pieces Node.js Collection.\n\nðŸ’¡ Smart Description: /*\nThis is a wrapper around the http.request() method that returns an HTTP response object, which can be used to send all data and end events for each of them"},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"76be084f-1115-4aa7-b50a-8ed354e9da62","created":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"9b96e589-3a75-410f-b663-b303f3c5e7a0"},"type":"DESCRIPTION","text":"/*\nThis is a wrapper around the http.request() method that returns an HTTP response object, which can be used to send all data and end events for each of them"}],"updated":"2023-10-11T08:04:03.291Z"},{"title":"Assert","id":"ef89540f-094e-4177-bc42-54236539a0f3","type":"CODE","raw":"const assert = require('assert');\n\nassert(5 > 7);","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.772Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"e39414ff-adc2-4012-9455-4ed6e851695d","created":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"ef89540f-094e-4177-bc42-54236539a0f3"},"type":"DESCRIPTION","text":"Uses the assert module to provide a set of assertion functions for verifying invariants. From The Pieces Node.js Collection.\n\nðŸ’¡ Smart Description: This code relates to assert, pieces node.js collection, javascript and js\n@return {boolean} true if the assertion was successful or false otherwise"},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"f7fc89a9-5362-4543-907c-b2356f44dd6e","created":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"ef89540f-094e-4177-bc42-54236539a0f3"},"type":"DESCRIPTION","text":"This code relates to assert, pieces node.js collection, javascript and js\n@return {boolean} true if the assertion was successful or false otherwise"}],"updated":"2023-10-11T08:03:56.263Z"},{"title":"Sleep","id":"0d1cb07c-87a0-41aa-abca-ac7688e518eb","type":"CODE","raw":"const sleep = ms => new Promise( res => setTimeout(res, ms));","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.772Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"8a329314-1611-4235-80a7-20d185898202","created":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"0d1cb07c-87a0-41aa-abca-ac7688e518eb"},"type":"DESCRIPTION","text":"Implementing sleep functionality in node.js using setTimeout along with a dynamic argument specifying time to wait. From The Pieces Node.js Collection."}],"updated":"2023-10-11T08:04:03.269Z"},{"title":"Getting the information of all CPUs installed","id":"9ce256aa-5cad-454d-a16d-275e3ec2a8ef","type":"CODE","raw":"const os = require('os');\nconst value =  os.cpus();\n\nconsole.log(\"os.cpus() ==> \" + JSON.stringify(value) );","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.772Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"c48009a5-44a3-422e-b575-fe7ebf9c1019","created":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"9ce256aa-5cad-454d-a16d-275e3ec2a8ef"},"type":"DESCRIPTION","text":"Get information about all CPUs available using the os module. From The Pieces Node.js Collection."}],"updated":"2023-10-11T08:04:03.275Z"},{"title":"Parse command-line arguments","id":"46191d3e-53d3-4c43-812f-9c04771032da","type":"CODE","raw":"const getCmdArguments = () => process.argv.slice(2);","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.771Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"402aec75-6f5a-4fb0-a4a4-43160ea9f5b6","created":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.355Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"46191d3e-53d3-4c43-812f-9c04771032da"},"type":"DESCRIPTION","text":"To grab specified command-line arguments, we use the process module which gives control over the current Node.js process, and we remove the first two arguments from the command-line, the Node.js executable and the executed file name. From The Pieces Node.js Collection."}],"updated":"2023-10-11T08:03:56.260Z"},{"title":"Create a Node HTTP Server","id":"bd60c95f-688d-4e67-acb1-7c660fff6838","type":"CODE","raw":"const http = require('http');\n\nhttp.createServer((request, response) => {\n\n\tresponse.writeHead(200, {\n\t\t'Content-Type': 'text/plain'\n\t});\n\tresponse.write('Hello from Pieces!');\n\tresponse.end();\n\n}).listen(8080);\n\nconsole.log('server running on port 8080');","language":"js","time":"4 days ago","created":"2023-10-11T04:28:42.770Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"49edaffe-d688-468d-969c-13ce518cf9a1","created":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"bd60c95f-688d-4e67-acb1-7c660fff6838"},"type":"DESCRIPTION","text":"Creates a simple HTTP server that writes a response to the client and listens on port 8080. If it is running, a message will be logged stating server running on port 8080. From The Pieces Node.js Collection.\n\nðŸ’¡ Smart Description: /*\nThis code relates to node server, web server and pieces node.js collection"},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"b0e8ae27-4b4c-438f-95af-4bc03fe10e6c","created":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T04:28:42.356Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"bd60c95f-688d-4e67-acb1-7c660fff6838"},"type":"DESCRIPTION","text":"/*\nThis code relates to node server, web server and pieces node.js collection"}],"updated":"2023-10-11T08:03:56.258Z"},{"title":"AppProps Type Declaration","id":"cec6f87a-170e-4746-a310-3fc612f1eaea","type":"CODE","raw":"type AppProps = {\n  message: string;\n  count: number;\n  disabled: boolean;\n  names: string[];\n  status: \"waiting\" | \"success\";\n  obj: {\n    id: string;\n    title: string;\n  };\n  objArr: {\n    id: string;\n    title: string;\n  }[];\n  obj2: unknown;\n  obj3: Record<string, unknown>;\n  dict1: Record<string, MyTypeHere>;\n  dict2: Record<string, MyTypeHere>;\n  onClick: () => void;\n  onChange: (id: number) => void;\n  onChangeWithEvent: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onClickWithEvent: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onSomething: () => void;\n  optional?: OptionalType;\n  setState: React.Dispatch<React.SetStateAction<number>>;\n};\n\n/**\n * Notes:\n * - Replaced \"object\" with \"unknown\" for obj2 as \"object\" type does not allow accessing properties, whereas \"unknown\" type does not allow accessing properties without type assertion.\n * - Replaced obj3 with Record<string, unknown> as it provides a similar structure (no required properties) but is more commonly used.\n * - Renamed the second onChange and onClick definitions with additional suffix \"WithEvent\" to avoid naming conflict.\n * - Replaced dict1 type with Record<string, MyTypeHere> which is equivalent to dict2.\n**/\n\n// Example usage:\nconst props: AppProps = {\n  message: \"Hello\",\n  count: 5,\n  disabled: false,\n  names: [\"Alice\", \"Bob\"],\n  status: \"waiting\",\n  obj: {\n    id: \"123\",\n    title: \"Example\"\n  },\n  objArr: [\n    { id: \"1\", title: \"Item 1\" },\n    { id: \"2\", title: \"Item 2\" }\n  ],\n  obj2: {},\n  obj3: {},\n  dict1: {\n    key1: value1,\n    key2: value2\n  },\n  dict2: {\n    key1: value1,\n    key2: value2\n  },\n  onClick: () => {\n    console.log(\"Button clicked\");\n  },\n  onChange: (id) => {\n    console.log(\"Value changed:\", id);\n  },\n  onChangeWithEvent: (event) => {\n    console.log(\"Input changed:\", event.target.value);\n  },\n  onClickWithEvent: (event) => {\n    console.log(\"Button clicked:\", event.target);\n  },\n  onSomething: () => {\n    console.log(\"Something happened\");\n  },\n  optional: \"Optional value\",\n  setState: (newValue) => {\n    console.log(\"State updated:\", newValue);\n  }\n};","language":"ts","time":"4 days ago","created":"2023-10-11T03:16:47.505Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"41925a80-4c65-40ff-b8d3-50091300d169","created":{"value":"2023-10-11T03:16:47.505Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T03:16:47.505Z","readable":"4 days ago"},"mechanism":"MANUAL","asset":{"id":"cec6f87a-170e-4746-a310-3fc612f1eaea"},"type":"DESCRIPTION","text":"Typing Component Props\n\nThis is intended as a basic orientation and reference for React developers familiarizing with TypeScript."},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"bee84aa2-bc93-434c-b64a-2646cd6e3468","created":{"value":"2023-10-11T03:16:49.723Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T03:16:49.723Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"cec6f87a-170e-4746-a310-3fc612f1eaea"},"type":"DESCRIPTION","text":"This code defines a type object with properties such as message, count, disabled, and status. It also includes functions to set the state setter function for an event that can be triggered when changing or disposed of their types by calling React's SetStateAction() method on","model":{"id":"b0602842-873f-40a8-9f2a-d124c4c652fb"}},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"84931174-74f7-4fd2-832e-aa5b2b5371ae","created":{"value":"2023-10-11T03:17:06.482Z","readable":"4 days ago"},"updated":{"value":"2023-10-11T03:17:06.482Z","readable":"4 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"cec6f87a-170e-4746-a310-3fc612f1eaea"},"type":"DESCRIPTION","text":"The code snippet defines the type of props that can be passed to a component in a React application. It includes various types such as strings, numbers, booleans, arrays, objects, functions, and optional props.","model":{"id":"b0602842-873f-40a8-9f2a-d124c4c652fb"}}],"updated":"2023-10-11T08:03:56.248Z"},{"title":"ChÆ°Æ¡ng 3 Ká»¹ thuáº­t kiá»ƒm thá»­ há»™p tráº¯ng (tt)","id":"3f248c3c-3fee-4fb1-bb9c-77e8aae28a49","type":"CODE","raw":"class HelloWorld:\n    def __init__(self):\n        self.message = \"Hello, World!\"\n    \n    def say_hello(self):\n        print(self.message)\n\n# Create an instance of the class\nhello = HelloWorld()\n\n# Call the say_hello method\nhello.say_hello()\n","language":"py","time":"5 days ago","created":"2023-10-10T16:23:13.655Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"4aa2c8e7-f998-49ea-96b5-ba1a2462293c","created":{"value":"2023-10-10T16:23:14.641Z","readable":"5 days ago"},"updated":{"value":"2023-10-10T16:23:14.641Z","readable":"5 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"3f248c3c-3fee-4fb1-bb9c-77e8aae28a49"},"type":"DESCRIPTION","text":"This code defines a class called HelloWorld that prints \"Hello, World!\" and calls the say_hello method. It also creates an instance of it with methods to call their say_hello method on each message.","model":{"id":"b0602842-873f-40a8-9f2a-d124c4c652fb"}},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"74645d2d-fab2-4e03-a3ae-cc7ae37423f7","created":{"value":"2023-10-10T16:23:28.740Z","readable":"5 days ago"},"updated":{"value":"2023-10-10T16:23:28.740Z","readable":"5 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"3f248c3c-3fee-4fb1-bb9c-77e8aae28a49"},"type":"DESCRIPTION","text":"The code creates a class called HelloWorld with a message attribute and a method to print the message. It then creates an instance of the class and calls the method to print \"Hello, World!\".","model":{"id":"b0602842-873f-40a8-9f2a-d124c4c652fb"}}],"updated":"2023-10-11T08:03:56.242Z"}],"gptContexts":[],"gptFolderNames":[],"enrichedCode":{},"llmModelId":"","migration":1}